{"version":3,"sources":["components/TodoMain.jsx","App.js","index.js"],"names":["TodoMain","props","componentDidMount","document","title","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","onReset","clear","sort","a","b","map","item","index","color","card","background","width","marginLeft","display","taskComplete","textDecoration","Card","key","style","Content","Grid","columns","divided","Row","Column","Meta","textAlign","Icon","link","size","onClick","completeTask","Header","wordWrap","fontSize","fontWeight","deleteTask","splice","as","className","role","Form","Input","type","this","placeholder","border","boxShadow","Button","Group","positive","Or","negative","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1a9341f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon,Button,Grid } from \"semantic-ui-react\";\r\nimport \"./TodoMain.css\";\r\n\r\nclass TodoMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      task: \"\",\r\n      tasklist: []\r\n    };\r\n  }\r\n//  onload fetch the task list\r\n  componentDidMount = () => {\r\n    // setting page title\r\n    document.title=\"Todo App (React)\"\r\n    this.getTasks();\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  // add task to the list\r\n  onSubmit = () => {\r\n    // check is task is empty string\r\n    if (this.state.task) {\r\n      // fetch task list from localStorage\r\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n      // task list is null means empty\r\n      // create an empty list\r\n      if (tasklist == null) {\r\n        tasklist = [];\r\n      }\r\n      // create task object\r\n      // default status is false\r\n      let task = {\r\n        task: `ðŸ”– ${this.state.task}`,\r\n        status: false // false-> incomplete task, true -> completed task\r\n      };\r\n      // add the task to the task list\r\n      tasklist.push(task);\r\n      // save the task list in localStorage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // clear the form\r\n      this.setState({ task: \"\" });\r\n\r\n      // refresh the tasks\r\n      this.getTasks();\r\n    }\r\n  };\r\n\r\n  onReset = ()=>{\r\n    // clearing the state to initial value\r\n    this.setState({\r\n      task: \"\",\r\n      tasklist: []\r\n  });\r\n  // clearing local storage\r\n    localStorage.clear();\r\n  }\r\n\r\n  // get all the tasks\r\n  getTasks = () => {\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // check if task list is empty\r\n    if (tasklist) {\r\n      // sort all the tasks on the basis of status\r\n      // completed task will move down\r\n      tasklist = tasklist.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      // saving the sorted task list in localStorage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // set the tasklist to the state\r\n      this.setState({\r\n        // Incomplete: orange\r\n        // complete: green\r\n        tasklist: tasklist.map((item, index) => {\r\n          let color = \"orange\";\r\n          let card = { \r\n            background: \"white\",\r\n            width:\"100%\",\r\n            marginLeft:\"10%\",\r\n            display:\"inline-block\"\r\n          };\r\n          let headerDiv = {\r\n            wordWrap: \"break-word\",\r\n            fontSize:\"2em\",\r\n            fontWeight:\"bold\" \r\n          }\r\n          let taskComplete = { textDecoration: \"none\",\r\n          color:\"orange\"\r\n          };\r\n\r\n          if (item.status) {\r\n            color = \"green\";\r\n            card[\"background\"] = \"whitesmoke\";\r\n            taskComplete[\"textDecoration\"] = \"line-through\";\r\n            taskComplete['color'] ='red';\r\n          }\r\n          return (\r\n            <Card key={index} color={color} style={card}>\r\n              <Card.Content>\r\n              <Grid columns={3} divided>\r\n              <Grid.Row>\r\n                <Grid.Column width={2}>\r\n                <Card.Meta textAlign=\"center\">\r\n                <Icon\r\n                    link\r\n                    name=\"check circle\"\r\n                    color=\"green\"\r\n                    size=\"huge\"\r\n                    onClick={() => this.completeTask(index)}\r\n                  />\r\n                </Card.Meta>\r\n                </Grid.Column>\r\n                <Grid.Column width={12}>\r\n                <Card.Header textAlign=\"center\" style={taskComplete}>\r\n                  <div style={headerDiv}>{item.task}</div>\r\n                </Card.Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                <Card.Meta textAlign=\"center\">\r\n                  <Icon\r\n                    link\r\n                    name=\"delete\"\r\n                    color=\"red\"\r\n                    size=\"huge\"\r\n                    onClick={() => this.deleteTask(index)}\r\n                  />\r\n                </Card.Meta>\r\n                </Grid.Column>\r\n                </Grid.Row>\r\n                </Grid>\r\n              </Card.Content>\r\n            </Card>\r\n          );\r\n        })\r\n      });\r\n    }\r\n  };\r\n\r\n  // change task status to true\r\n  completeTask = index => {\r\n    // fetch tasklist from localStorage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // change status to true\r\n    tasklist[index].status = true;\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    this.getTasks();\r\n  };\r\n\r\n  // delete the task from the task list\r\n  deleteTask = index => {\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // remove the task from the task list\r\n    tasklist.splice(index, 1);\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    this.getTasks();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Header as=\"h1\">\r\n            <div className=\"header\"><span role=\"img\">ðŸ“‘</span> Todo App</div>{\" \"}\r\n          </Header>\r\n        </div>\r\n        <div className=\"form\">\r\n          <Form>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={this.onChange}\r\n              value={this.state.task}\r\n              placeholder=\"Enter Task Name\"\r\n              style={{border: \"2px solid whiteSmoke\",\r\n                  boxShadow:\"1px 1px 5px 1px grey\"\r\n            }}\r\n            />\r\n            &nbsp;&nbsp;&nbsp;\r\n            <Button.Group>\r\n            <Button positive onClick={this.onSubmit}>Add Task</Button>\r\n              <Button.Or />\r\n              <Button negative onClick={this.onReset}>Reset All</Button>\r\n            </Button.Group>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Card.Group>{this.state.tasklist}</Card.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoMain;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoMain from \"./components/TodoMain\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TodoMain />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}