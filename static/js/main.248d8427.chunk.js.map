{"version":3,"sources":["components/TodoMain.jsx","App.js","index.js"],"names":["TodoMain","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","document","title","getTasks","onChange","event","setState","defineProperty","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","concat","status","push","setItem","stringify","onReset","clear","sort","a","b","map","item","index","color","card","background","width","marginLeft","display","taskComplete","textDecoration","react_default","createElement","Card","fluid","key","style","Content","Grid","columns","divided","doubling","Row","Column","Meta","textAlign","Icon","link","size","onClick","completeTask","Header","wordWrap","fontSize","fontWeight","deleteTask","splice","as","className","role","Form","Input","type","placeholder","border","boxShadow","Button","Group","positive","Or","negative","Component","App","src_components_TodoMain","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.248d8427.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon,Button,Grid } from \"semantic-ui-react\";\r\nimport \"./TodoMain.css\";\r\n\r\nclass TodoMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      task: \"\",\r\n      tasklist: []\r\n    };\r\n  }\r\n//  onload fetch the task list\r\n  componentDidMount = () => {\r\n    // setting page title\r\n    document.title=\"Todo App (React)\"\r\n    this.getTasks();\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  // add task to the list\r\n  onSubmit = () => {\r\n    // check is task is empty string\r\n    if (this.state.task) {\r\n      // fetch task list from localStorage\r\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n      // task list is null means empty\r\n      // create an empty list\r\n      if (tasklist == null) {\r\n        tasklist = [];\r\n      }\r\n      // create task object\r\n      // default status is false\r\n      let task = {\r\n        task: `ðŸ”– ${this.state.task}`,\r\n        status: false // false-> incomplete task, true -> completed task\r\n      };\r\n      // add the task to the task list\r\n      tasklist.push(task);\r\n      // save the task list in localStorage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // clear the form\r\n      this.setState({ task: \"\" });\r\n\r\n      // refresh the tasks\r\n      this.getTasks();\r\n    }\r\n  };\r\n\r\n  onReset = ()=>{\r\n    // clearing the state to initial value\r\n    this.setState({\r\n      task: \"\",\r\n      tasklist: []\r\n  });\r\n  // clearing local storage\r\n    localStorage.clear();\r\n  }\r\n\r\n  // get all the tasks\r\n  getTasks = () => {\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // check if task list is empty\r\n    if (tasklist) {\r\n      // sort all the tasks on the basis of status\r\n      // completed task will move down\r\n      tasklist = tasklist.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      // saving the sorted task list in localStorage\r\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n      // set the tasklist to the state\r\n      this.setState({\r\n        // Incomplete: orange\r\n        // complete: green\r\n        tasklist: tasklist.map((item, index) => {\r\n          let color = \"orange\";\r\n          let card = { \r\n            background: \"white\",\r\n            width:\"100%\",\r\n            marginLeft:\"10%\",\r\n            display:\"inline-block\"\r\n          };\r\n          let headerDiv = {\r\n            wordWrap: \"break-word\",\r\n            fontSize:\"2em\",\r\n            fontWeight:\"bold\" \r\n          }\r\n          let taskComplete = { textDecoration: \"none\",\r\n          color:\"orange\"\r\n          };\r\n\r\n          if (item.status) {\r\n            color = \"green\";\r\n            card[\"background\"] = \"whitesmoke\";\r\n            taskComplete[\"textDecoration\"] = \"line-through\";\r\n            taskComplete['color'] ='red';\r\n          }\r\n          return (\r\n            <Card fluid key={index} color={color} style={card}>\r\n              <Card.Content>\r\n              <Grid columns={3} divided doubling>\r\n              <Grid.Row>\r\n                <Grid.Column width={2}>\r\n                <Card.Meta textAlign=\"center\">\r\n                <Icon\r\n                    link\r\n                    name=\"check circle\"\r\n                    color=\"green\"\r\n                    size=\"huge\"\r\n                    onClick={() => this.completeTask(index)}\r\n                  />\r\n                </Card.Meta>\r\n                </Grid.Column>\r\n                <Grid.Column width={12}>\r\n                <Card.Header textAlign=\"center\" style={taskComplete}>\r\n                  <div style={headerDiv}>{item.task}</div>\r\n                </Card.Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                <Card.Meta textAlign=\"center\">\r\n                  <Icon\r\n                    link\r\n                    name=\"delete\"\r\n                    color=\"red\"\r\n                    size=\"huge\"\r\n                    onClick={() => this.deleteTask(index)}\r\n                  />\r\n                </Card.Meta>\r\n                </Grid.Column>\r\n                </Grid.Row>\r\n                </Grid>\r\n              </Card.Content>\r\n            </Card>\r\n          );\r\n        })\r\n      });\r\n    }\r\n  };\r\n\r\n  // change task status to true\r\n  completeTask = index => {\r\n    // fetch tasklist from localStorage\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // change status to true\r\n    tasklist[index].status = true;\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    this.getTasks();\r\n  };\r\n\r\n  // delete the task from the task list\r\n  deleteTask = index => {\r\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // remove the task from the task list\r\n    tasklist.splice(index, 1);\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    this.getTasks();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Header as=\"h1\">\r\n            <div className=\"header\"><span role=\"img\">ðŸ“‘</span> Todo App</div>{\" \"}\r\n          </Header>\r\n        </div>\r\n        <div className=\"form\">\r\n          <Form>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={this.onChange}\r\n              value={this.state.task}\r\n              placeholder=\"Enter Task Name\"\r\n              style={{border: \"2px solid whiteSmoke\",\r\n                  boxShadow:\"1px 1px 5px 1px grey\"\r\n            }}\r\n            />\r\n            &nbsp;&nbsp;&nbsp;\r\n            <Button.Group>\r\n            <Button positive onClick={this.onSubmit}>Add Task</Button>\r\n              <Button.Or />\r\n              <Button negative onClick={this.onReset}>Reset All</Button>\r\n            </Button.Group>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Card.Group>{this.state.tasklist}</Card.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoMain;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoMain from \"./components/TodoMain\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <TodoMain />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}